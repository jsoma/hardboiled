// Generated by CoffeeScript 1.6.3
var Hardboiled, Q, dir, fs, jsdom, path, request, urlparser, vm, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Q = require('q');

fs = require('fs');

urlparser = require('url');

request = require('request');

vm = require('vm');

jsdom = require('jsdom');

path = require('path');

dir = require('node-dir');

_ = require('underscore');

Hardboiled = {};

Hardboiled.Engines = require('./engines');

Hardboiled.Clue = (function() {
  function Clue(options) {
    this.runTest = __bind(this.runTest, this);
    this.test_javascript = __bind(this.test_javascript, this);
    this.test_sudo = __bind(this.test_sudo, this);
    this.test_global = __bind(this.test_global, this);
    this.test_filename = __bind(this.test_filename, this);
    this.test_jquery = __bind(this.test_jquery, this);
    this.test_domain = __bind(this.test_domain, this);
    this.test_text = __bind(this.test_text, this);
    this.test_header = __bind(this.test_header, this);
    this.test_meta = __bind(this.test_meta, this);
    this.processResult = __bind(this.processResult, this);
    this.runTests = __bind(this.runTests, this);
    this.toMatch = __bind(this.toMatch, this);
    var content, data, sandbox;
    this.path = options.path;
    if (this.path) {
      content = fs.readFileSync(this.path, 'utf8');
      sandbox = {};
      vm.runInNewContext('var data = ' + content, sandbox);
      data = sandbox.data;
    }
    _.extend(this, options.data || data);
    this.data = options.data || data;
  }

  Clue.prototype.toMatch = function() {
    return {
      title: this.data.title,
      description: this.data.description,
      url: this.data.url
    };
  };

  Clue.prototype.runTests = function(page) {
    var _this = this;
    return Q.all(this.tests.map(function(test) {
      return _this['test_' + test.type].call(_this, page, test.test);
    }));
  };

  Clue.prototype.processResult = function(type, result) {
    var response;
    response = {
      type: type,
      passed: !!result && !(result instanceof Array && result.length === 0)
    };
    if (result !== !!result) {
      if (result instanceof Array) {
        response.data = {
          matches: result
        };
      } else {
        response.data = result;
      }
    }
    return response;
  };

  Clue.prototype.test_meta = function(page, data) {
    var _this = this;
    return this.runTest(data, function(d) {
      var response, result;
      result = page.hasMeta(data);
      response = _this.processResult('meta', result);
      return d.resolve(response);
    });
  };

  Clue.prototype.test_header = function(page, data) {
    var _this = this;
    return this.runTest(data, function(d) {
      var response, result;
      result = page.hasHeader(data);
      response = _this.processResult('header', result);
      return d.resolve(response);
    });
  };

  Clue.prototype.test_text = function(page, text) {
    var _this = this;
    return this.runTest(text, function(d) {
      var response, result;
      result = page.hasText(text);
      response = _this.processResult('text', result);
      return d.resolve(response);
    });
  };

  Clue.prototype.test_domain = function(page, regex) {
    var _this = this;
    return this.runTest(regex, function(d) {
      var response, results;
      results = regex.exec(urlparser.parse(page.url).hostname);
      response = _this.processResult('domain', !!results);
      return d.resolve(response);
    });
  };

  Clue.prototype.test_jquery = function(page, method) {
    var _this = this;
    return this.runTest(method, function(d) {
      var promise;
      promise = page.evaluate_with_args(function(method) {
        var foundjQuery, key, keys, _i, _len;
        keys = Object.keys(window);
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          if (!!window[key] && !!window[key].fn && !!window[key].fn.jquery) {
            foundjQuery = window[key];
          }
        }
        if (!foundjQuery) {
          return;
        }
        return !!foundjQuery("<div></div>")[method];
      }, method);
      return Q(promise).then(function(value) {
        var response;
        response = _this.processResult('jquery', !!value);
        return d.resolve(response);
      });
    });
  };

  Clue.prototype.test_filename = function(page, filename) {
    var _this = this;
    return this.runTest(filename, function(d) {
      var response, results;
      results = page.resources.filter(function(resource) {
        return resource.isNamed(filename);
      }).map(function(resource) {
        return resource.url;
      });
      response = _this.processResult('filename', results);
      return d.resolve(response);
    });
  };

  Clue.prototype.test_selector = function(page, selector) {
    var _this = this;
    return this.runTest(selector, function(d) {
      var promise;
      promise = page.evaluate_with_args(function(selector) {
        return document.querySelector(selector) !== null;
      }, selector);
      return Q(promise).then(function(value) {
        var response;
        response = _this.processResult('selector', !!value);
        return d.resolve(response);
      });
    });
  };

  Clue.prototype.test_global = function(page, global) {
    var _this = this;
    return this.runTest(global, function(d) {
      var promise;
      promise = page.evaluate_with_args(function(variable) {
        if (variable.indexOf('.') !== -1) {
          return variable.split('.').reduce(function(prev, curr) {
            if (!prev) {
              return;
            }
            return prev[curr];
          }, window);
        } else {
          return !!window[variable];
        }
      }, global);
      return Q(promise).then(function(result) {
        var response;
        response = _this.processResult('global', !!result);
        return d.resolve(response);
      });
    });
  };

  Clue.prototype.test_sudo = function(page, fn) {
    var _this = this;
    return this.runTest(fn, function(d) {
      var response, result;
      result = fn.call(_this, page);
      response = _this.processResult('sudo', result);
      return d.resolve(response);
    });
  };

  Clue.prototype.test_javascript = function(page, fn) {
    var _this = this;
    return this.runTest(fn, function(d) {
      var promise;
      promise = page.evaluate(fn);
      return Q(promise).then(function(result) {
        var response;
        response = _this.processResult('javascript', result);
        return d.resolve(response);
      });
    });
  };

  Clue.prototype.runTest = function(test, fn) {
    var d,
      _this = this;
    d = Q.defer();
    process.nextTick(function() {
      if (!test) {
        return d.resolve(false);
      }
      return fn(d);
    });
    return d.promise;
  };

  return Clue;

})();

Hardboiled.Resource = (function() {
  function Resource(response) {
    var pieces, url_pieces;
    this.url = response.url;
    this.body = response.body;
    this.headers = response.headers;
    this.path = urlparser.parse(this.url).pathname;
    url_pieces = this.path.split('/');
    this.filename = url_pieces[url_pieces.length - 1];
    this.cleaned_name = this.filename.replace(/([-.](min|compressed))?(\.[a-z]*)?$/, '');
    this.cleaned_url = this.url.replace(/.(min|compressed)/, '');
    pieces = this.filename.split('.');
    if (pieces.length > 1) {
      this.extension = pieces[pieces.length - 1];
    }
    this.type = this.findType();
    this.comments = this.findComments();
  }

  Resource.prototype.findType = function() {
    return this.extension;
  };

  Resource.prototype.findComments = function() {
    var regex;
    if (!this.body) {
      return [];
    }
    if (this.type === 'css') {
      regex = new RegExp(/\/\*\*(.|\n)+?\*\//g);
      return this.body.match(this.comment_regex) || [];
    } else if (this.type === 'js') {
      regex = new RegExp(/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g);
      return this.body.match(this.comment_regex) || [];
    }
  };

  Resource.prototype.isNamed = function(name) {
    if (name instanceof RegExp) {
      return name.test(this.cleaned_url);
    } else if (name.indexOf('/') !== -1) {
      return this.cleaned_url.indexOf(name) !== -1;
    } else {
      return name === this.cleaned_name || name === this.filename + '.' + this.extension;
    }
  };

  return Resource;

})();

Hardboiled.Page = (function() {
  function Page(options) {
    this.url = options.url;
    this.body = options.body;
    this.resources = [];
    this.meta = [];
    this.matches = [];
    this.engine = new Hardboiled.Engines[options.engine || 'PhantomJS'](this, options);
  }

  Page.prototype.processClues = function(clues) {
    var _this = this;
    return Q.all(clues.map(function(clue) {
      var d;
      d = Q.defer();
      process.nextTick(function() {
        return clue.runTests(_this).then(function(results) {
          var data, match, passed;
          passed = results.filter(function(result) {
            return result && result.passed;
          });
          if (passed.length > 0) {
            match = clue.toMatch();
            data = _.pluck(passed, 'data');
            match.data = _.compact(data);
            _this.matches.push(match);
          }
          return d.resolve();
        });
      });
      return d.promise;
    }));
  };

  Page.prototype.addResource = function(data) {
    var resource;
    resource = new Hardboiled.Resource(data);
    return this.resources.push(resource);
  };

  Page.prototype.hasText = function(text) {
    return this.body.indexOf(text) !== -1;
  };

  Page.prototype.addMeta = function(data) {
    return this.meta.push(data);
  };

  Page.prototype.hasHeader = function(data) {
    var header, key, resource, results, value, value_match, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    results = [];
    if (typeof data !== 'string') {
      key = Object.keys(data)[0];
      value = data[key];
      _ref = this.resources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        _ref1 = resource.headers;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          header = _ref1[_j];
          if (!!value.exec) {
            value_match = header.value.match(value);
          } else {
            value_match = header.value === value;
          }
          if (header.name === key && value_match) {
            results.push([resource.url, header]);
          }
        }
      }
    } else {
      key = data;
      _ref2 = this.resources;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        resource = _ref2[_k];
        _ref3 = resource.headers;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          header = _ref3[_l];
          if (header.name === key) {
            results.push([resource.url, header]);
          }
        }
      }
    }
    if (results.length > 0) {
      return results;
    } else {
      return false;
    }
  };

  Page.prototype.hasMeta = function(data) {
    var keys,
      _this = this;
    keys = Object.keys(data);
    return this.meta.filter(function(tag) {
      var extras, key, matches, _i, _len, _ref;
      extras = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (!tag[key]) {
          return false;
        }
        if (!!data[key].exec) {
          matches = tag[key].match(data[key]);
          if (matches === null) {
            return false;
          }
          if (matches.length > 1) {
            extras.push(matches.slice(1));
          }
        } else {
          if (tag[key] !== data[key]) {
            return false;
          }
        }
      }
      return (_ref = extras.length > 0) != null ? _ref : {
        extras: true
      };
    });
  };

  Page.prototype.evaluate_with_args = function(fn, arg1) {
    return this.engine.evaluate_with_args(fn, arg1);
  };

  Page.prototype.evaluate = function(fn) {
    return this.engine.evaluate(fn);
  };

  Page.prototype.openPage = function() {
    return this.engine.openPage();
  };

  Page.prototype.closePage = function() {
    return this.engine.closePage();
  };

  return Page;

})();

Hardboiled.Scanner = (function() {
  function Scanner(options) {
    this.path = options.path || '../clues';
  }

  Scanner.prototype.importClues = function(callback) {
    var _this = this;
    this.clues = [];
    return dir.files(path.resolve(__dirname, this.path), function(err, files) {
      var clue, file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (!/\.js$/.test(file)) {
          continue;
        }
        clue = new Hardboiled.Clue({
          path: file
        });
        _this.clues.push(clue);
      }
      return callback(_this);
    });
  };

  Scanner.prototype.scan = function(options, callback) {
    var page,
      _this = this;
    if (!this.clues) {
      return this.importClues(function() {
        return _this.scan(options, callback);
      });
    }
    page = new Hardboiled.Page(options);
    return page.openPage().then(function() {
      return page.processClues(_this.clues);
    }).then(function() {
      page.closePage();
      return callback(null, page);
    });
  };

  return Scanner;

})();

Hardboiled.scan = function(url, callback) {
  var scanner;
  scanner = new Hardboiled.Scanner({});
  return scanner.scan({
    url: url
  }, callback);
};

module.exports = Hardboiled;
