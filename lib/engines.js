// Generated by CoffeeScript 1.6.3
var Engines, Q, jsdom, path, phantom, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Q = require('q');

phantom = require('phantom');

jsdom = require('jsdom');

path = require('path');

Engines = {};

Engines.Template = (function() {
  function Template(page, options) {
    this.page = page;
    this.wait = options.wait || 1000;
    this.binary = options.binary || 'phantomjs';
  }

  Template.prototype.openPage = function() {
    return console.log("NOT IMPLEMENTED");
  };

  Template.prototype.hasMeta = function() {
    return console.log("NOT IMPLEMENTED");
  };

  Template.prototype.closePage = function() {
    return console.log("NOT IMPLEMENTED");
  };

  Template.prototype.evaluate = function() {
    return console.log("NOT IMPLEMENTED");
  };

  Template.prototype.evaluate_with_args = function(arg1) {
    return console.log("NOT IMPLEMENTED");
  };

  return Template;

})();

Engines.PhantomJS = (function(_super) {
  __extends(PhantomJS, _super);

  function PhantomJS() {
    _ref = PhantomJS.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PhantomJS.prototype.openPage = function() {
    var d,
      _this = this;
    d = Q.defer();
    phantom.create({
      binary: this.binary
    }, function(ph) {
      _this.ph = ph;
      return ph.createPage(function(page) {
        _this.phPage = page;
        _this.phPage.set('onResourceReceived', function(response) {
          if (response.status === 200 && response.stage === 'end') {
            return _this.page.addResource(response);
          }
        });
        return _this.phPage.open(_this.page.url, function(status) {
          return setTimeout(function() {
            return _this.pullMeta().then(function(meta) {
              var item, items, _i, _len;
              items = JSON.parse(meta);
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                _this.page.addMeta(item);
              }
              return _this.pullBody().then(function(body) {
                _this.page.body = body;
                return d.resolve();
              });
            });
          }, _this.wait);
        });
      });
    });
    return d.promise;
  };

  PhantomJS.prototype.pullBody = function() {
    console.log('pulling body');
    return this.evaluate(function() {
      return document.body.innerHTML;
    });
  };

  PhantomJS.prototype.pullMeta = function() {
    return this.evaluate(function() {
      var attr, meta, meta_object, meta_tags, tag, _i, _j, _len, _len1, _ref1;
      meta_tags = document.getElementsByTagName('meta');
      meta = [];
      for (_i = 0, _len = meta_tags.length; _i < _len; _i++) {
        tag = meta_tags[_i];
        meta_object = {};
        _ref1 = tag.attributes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          attr = _ref1[_j];
          meta_object[attr.nodeName] = attr.nodeValue;
        }
        meta.push(meta_object);
      }
      return JSON.stringify(meta);
    });
  };

  PhantomJS.prototype.evaluate = function(fn) {
    var d;
    d = Q.defer();
    this.phPage.evaluate(fn, function(result) {
      return d.resolve(result);
    });
    return d.promise;
  };

  PhantomJS.prototype.evaluate_with_args = function(fn, arg1) {
    var d;
    d = Q.defer();
    this.phPage.evaluate(fn, function(result) {
      return d.resolve(result);
    }, arg1);
    return d.promise;
  };

  PhantomJS.prototype.closePage = function() {
    return this.ph.exit();
  };

  return PhantomJS;

})(Engines.Template);

Engines.jsdom = (function(_super) {
  __extends(jsdom, _super);

  function jsdom() {
    _ref1 = jsdom.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  jsdom.prototype.openPage = function() {
    var d, options,
      _this = this;
    d = Q.defer();
    this.jsdom = jsdom.jsdom(this.body);
    this.window = this.jsdom.parentWindow;
    options = {
      FetchExternalResources: [],
      ProcessExternalResources: false,
      done: function(err, window) {
        var i, link, links, meta, meta_object, script, scripts, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref2;
        scripts = window.document.getElementsByTagName('script');
        for (_i = 0, _len = scripts.length; _i < _len; _i++) {
          script = scripts[_i];
          if (!!script.src) {
            _this.page.addResource({
              url: script.src
            });
          }
        }
        _this.page.setBody(window.document.body.innerHTML);
        links = window.document.getElementsByTagName('link');
        for (_j = 0, _len1 = links.length; _j < _len1; _j++) {
          link = links[_j];
          if (!!link.href) {
            _this.page.addResource({
              url: link.href
            });
          }
        }
        meta = window.document.getElementsByTagName('meta');
        for (_k = 0, _len2 = meta.length; _k < _len2; _k++) {
          tag = meta[_k];
          meta_object = {};
          _ref2 = tag.attributes;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            i = _ref2[_l];
            meta_object[tag.attributes[i].nodeName] = tag.attributes[i].nodeValue;
          }
          _this.page.addMeta(meta_object);
        }
        return d.resolve();
      }
    };
    if (this.page.body) {
      options.html = this.body;
    }
    if (this.page.url) {
      options.url = this.url;
    }
    jsdom.env(options);
    return d.promise;
  };

  jsdom.prototype.closePage = function() {};

  jsdom.prototype.evaluate = function() {
    var d;
    d = Q.defer();
    d.resolve(false);
    return d.promise;
  };

  jsdom.prototype.evaluate_with_args = function() {
    var d;
    d = Q.defer();
    d.resolve(false);
    return d.promise;
  };

  return jsdom;

})(Engines.Template);

module.exports = Engines;
