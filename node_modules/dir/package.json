{
  "name": "dir",
  "description": "Firebug-like dir() for Node.",
  "version": "0.1.2",
  "author": {
    "name": "Aseem Kishore",
    "email": "aseem.kishore@gmail.com"
  },
  "keywords": [
    "dir",
    "shell",
    "firebug",
    "util",
    "inspect"
  ],
  "homepage": "https://github.com/aseemk/node-dir",
  "repository": {
    "type": "git",
    "url": "git://github.com/aseemk/node-dir.git"
  },
  "main": "./dir.js",
  "engines": {
    "node": "*"
  },
  "readme": "dir for Node.js\n===============\n\nYou ever used Firebug? You know the awesome `dir` function its console has?\nWell, this is like that, but for Node.\n\nThat means you get *real* object inspection that goes up the prototype chain,\nnot the pansy-ass, weak-sauce \"inspection\" Node's `util.inspect` gives you.\nAnd it actually returns an object instead of a string, so you don't have to\ntediously and explicitly `console.log` it in the shell to unescape characters.\nAnd best of all, since it returns a real object, the output is just as nicely\ncolored and formatted as the native shell.\n\nBtw, it turns out Node already has a `console.dir`, but, uh... it doesn't seem\nany different than `console.log`! So this monkey-patches it to no longer suck.\n\nWith `dir` in hand, you're ready to kick some console ass. Go forth and enjoy!\n\n\nInstallation\n------------\n\n    npm install dir\n\n\nUsage\n-----\n\n`dir()` probably won't be terribly useful from within an app or file (though\nfeel free to let me know if I'm wrong!), but it's super convenient and useful\nfrom within the shell (AKA interactive-mode).\n\nBefore:\n\n    $ node\n    > console.dir(Function.prototype)\n    [Function: Empty]\n\nAfter:\n\n    $ node\n    > require('dir')\n    [Function: dir]\n    > console.dir(Function.prototype)\n    { bind: [Function: bind],\n      arguments: null,\n      toString: [Function: toString],\n      length: 0,\n      call: [Function: call],\n      name: 'Empty',\n      apply: [Function: apply],\n      caller: null,\n      constructor: [Function: Function],\n      '[prototype]': \n       { toString: [Function: toString],\n         __lookupGetter__: [Function: __lookupGetter__],\n         __defineGetter__: [Function: __defineGetter__],\n         toLocaleString: [Function: toLocaleString],\n         hasOwnProperty: [Function: hasOwnProperty],\n         valueOf: [Function: valueOf],\n         __defineSetter__: [Function: __defineSetter__],\n         constructor: [Function: Object],\n         propertyIsEnumerable: [Function: propertyIsEnumerable],\n         isPrototypeOf: [Function: isPrototypeOf],\n         __lookupSetter__: [Function: __lookupSetter__] } }\n\nThat's the briefest example I could come up with. Some kick-ass-ier examples to\nexperience first-hand:\n\n    > var dir = require('dir')\n    > dir(\"hello\")\n    > dir([1, 2, 3])\n    > dir(4.56)\n    > dir(/regexp/)\n    > dir(new Date())\n\nThe two samples above show the two different ways of using `dir`:\n\n    // using the monkey-patched console.dir\n    > require('dir')\n    > console.dir(foo)\n\n    // or grabbing the returned function\n    > var dir = require('dir')\n    > dir(foo)\n\nI really want to be able to get the best of both worlds:\n\n    // no need to save returned function; it's global\n    > require('dir')\n    > dir(foo)\n\nBut I can't seem to get this to work in the shell. If you have any ideas, let me\nknow or just submit a pull request!\n\n\nNext steps\n----------\n\nNone so far! Ideas, bug reports, praise, patches all welcome. =) Enjoy!\n",
  "readmeFilename": "readme.md",
  "_id": "dir@0.1.2",
  "_from": "dir@"
}
