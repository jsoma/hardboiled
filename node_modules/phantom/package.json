{
  "author": {
    "name": "Sam Gentle",
    "email": "sam@samgentle.com"
  },
  "name": "phantom",
  "description": "PhantomJS wrapper for Node",
  "homepage": "https://github.com/sgentle/phantomjs-node",
  "version": "0.5.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/sgentle/phantomjs-node.git"
  },
  "contributors": [
    {
      "name": "Amir Raminfar",
      "email": "findamir@gmail.com"
    }
  ],
  "main": "phantom.js",
  "engines": {
    "node": ">=v0.4.9"
  },
  "dependencies": {
    "dnode": "~1.0.5",
    "shoe": "~0.0.10"
  },
  "devDependencies": {
    "browserify": "1.10.9",
    "traverse": "~0.6.3",
    "coffee-script": "~1.3.3",
    "express": "3.2.5",
    "temp": "~0.4.0",
    "ps-tree": "~0.0.2",
    "vows": "~0.6.2"
  },
  "licenses": {
    "type": "MIT",
    "url": "http://www.opensource.org/licenses/MIT"
  },
  "scripts": {
    "test": "cake test"
  },
  "readme": "# PhantomJS bridge for NodeJS [![Build Status](https://secure.travis-ci.org/endel/phantomjs-node.png)](http://travis-ci.org/endel/phantomjs-node)\n\n\"It sure would be neat if [PhantomJS](http://www.phantomjs.org/) was a NodeJS module\", I hear you say. Well, wait no longer! This node module implements a nauseously clever bridge between Phantom and Node, so that you can use all your favourite PhantomJS functions without leaving NPM behind and living in a cave.\n\n## Intallation\n\nFirst, make sure PhantomJS is installed. This module expects the ```phantomjs``` binary to be in PATH somewhere. In other words, type this:\n\n    $ phantomjs\n\nIf that works, so will phantomjs-node. It's only been tested with PhantomJS 1.3, and almost certainly doesn't work with anything older.\n\nInstall it like this:\n\n    npm install phantom\n    \n    \nFor a brief introduction continue reading, otherwise **go to the [Wiki page](https://github.com/sgentle/phantomjs-node/wiki) for more information!**\n\n\n## How do I use it?\n\nUse it like this in Coffeescript:\n\n```coffeescript\nphantom = require 'phantom'\n\nphantom.create (ph) ->\n  ph.createPage (page) ->\n    page.open \"http://www.google.com\", (status) ->\n      console.log \"opened google? \", status\n      page.evaluate (-> document.title), (result) ->\n        console.log 'Page title is ' + result\n        ph.exit()\n```\n\nIn Javascript, do the same but add parentheses and curly braces everywhere.\n\nYou can use all the methods listed on the [PhantomJS API page](https://github.com/ariya/phantomjs/wiki/API-Reference)\n\n\nDue to the async nature of the bridge, some things have changed, though:\n\n* Return values (ie, of ```page.evaluate```) are returned in a callback instead\n* ```page.render()``` takes a callback so you can tell when it's done writing the file\n* Properties can't be get/set directly, instead use ```p.get('version', callback)``` or ```p.page.set('viewportSize', {width:640,height:480})```, etc. Nested objects can be accessed by including dots in keys, such as ```p.page.set('settings.loadImages', false)```\n* Callbacks can't be set directly, instead use ```page.set('callbackName', callback)```, e.g. ```page.set('onLoadFinished', function(success) {})```\n\n```ph.createPage()``` makes new PhantomJS WebPage objects, so use that if you want to open lots of webpages. You can also make multiple phantomjs processes by calling ```phantom.create()``` multiple times, so if you need that for some crazy reason, knock yourself out!\n\nYou can also pass command line switches to the phantomjs process by specifying additional args to ```phantom.create()```, eg:\n\n```coffeescript\nphantom.create '--load-images=no', '--local-to-remote-url-access=yes', (page) ->\n```\n\n##Note for Mac users\n\nPhantom requires you to have the XCode Command Line Tools installed on your box, or else you will get some nasty errors (`xcode` not found or `make` not found).  If you haven't already, simply install XCode through the App Store, then [install the command line tools](http://stackoverflow.com/questions/6767481/where-can-i-find-make-program-for-mac-os-x-lion).  \n\n## How does it work?\n\nDon't ask. The things these eyes have seen.\n\n## No really, how does it work?\n\nI will answer that question with a question. How do you communicate with a process that doesn't support shared memory, sockets, FIFOs, or standard input?\n\nWell, there's one thing PhantomJS does support, and that's opening webpages. In fact, it's really good at opening web pages. So we communicate with PhantomJS by spinning up an instance of ExpressJS, opening Phantom in a subprocess, and pointing it at a special webpage that turns socket.io messages into ```alert()``` calls. Those ```alert()``` calls are picked up by Phantom and there you go!\n\nThe communication itself happens via James Halliday's fantastic [dnode](https://github.com/substack/dnode) library, which fortunately works well enough when combined with [browserify](https://github.com/substack/node-browserify) to run straight out of PhantomJS's pidgin Javascript environment.\n\nIf you'd like to hack on phantom, please do! You can run the tests with ```cake test``` or ```npm test```, and rebuild the coffeescript/browserified code with ```cake build```. You might need to ```npm install -g coffeescript``` for cake to work.\n",
  "readmeFilename": "README.markdown",
  "_id": "phantom@0.5.4",
  "dist": {
    "shasum": "4f66a508352bd9e57c7ba9a0291d3d788855ab88"
  },
  "_from": "phantom@",
  "_resolved": "https://registry.npmjs.org/phantom/-/phantom-0.5.4.tgz"
}
